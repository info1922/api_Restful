{"version":3,"sources":["../../../../src/api/resources/usuario/usuario.controller.js"],"names":["signup","req","res","usuarioService","validateSignup","body","value","error","status","json","encryptPass","encryptPassword","password","User","findOne","email","existeUser","mensaje","user","local","nombre","apellido","role","USER_ROLE","save","ok","console","log","login","validateLogin","err","autenticacion","comparePassword","token","jwt","issue","id","_id","send"],"mappings":"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","file":"usuario.controller.js","sourcesContent":["import usuarioService from \"./usuario.service\";\r\nimport User, { USER_ROLE } from './usuario.model';\r\nimport jwt from \"../../helpers/jwt\";\r\n\r\n\r\n/* jshint ignore:start */\r\nexport default {\r\n\r\n    async signup(req, res) {\r\n\r\n        try {\r\n\r\n            const { value, error } = usuarioService.validateSignup(req.body);\r\n\r\n            if (error) {\r\n                return res.status(400).json(error);\r\n            }\r\n\r\n            const encryptPass = usuarioService.encryptPassword(value.password);\r\n\r\n            // Validar si ya existe un usuario\r\n            const existeUser = await User.findOne({ 'local.email': value.email });\r\n\r\n            if (existeUser) {\r\n                return res.status(500).json({ mensaje: 'Ya existe una cuenta con este correo' });\r\n            }\r\n\r\n            const user = await new User();\r\n            user.local.email = value.email;\r\n            user.nombre = value.nombre;\r\n            user.apellido = value.apellido;\r\n            user.local.password = encryptPass;\r\n            user.role = value.role || USER_ROLE;\r\n\r\n            await user.save();\r\n\r\n            return res.status(200).json({ ok: true, user });\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            return res.status(500).json({ ok: false, error });\r\n        }\r\n\r\n    },\r\n\r\n    async login(req, res) {\r\n        try {\r\n\r\n            const { value, error } = usuarioService.validateLogin(req.body);\r\n\r\n            if (error) {\r\n                return res.status(400).json(error);\r\n            }\r\n\r\n            const user = await User.findOne({ 'local.email': value.email });\r\n\r\n            // Si el email no existe\r\n            if (!user) {\r\n                return res.status(401).json({ ok: false, err: 'Correo o contraseña incorrectos' });\r\n            }\r\n\r\n            const autenticacion = usuarioService.comparePassword(value.password, user.local.password);\r\n\r\n            // Si las contraseñas no coinciden\r\n            if (!autenticacion) {\r\n                return res.status(401).json({ ok: false, err: 'Correo o contraseña incorrectos' });\r\n            }\r\n\r\n            const token = jwt.issue({ id: user._id }, '1d');\r\n\r\n            return res.status(200).json({ user, token }); // Jwt token\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            return res.status(500).json({ ok: false, error });\r\n        }\r\n    },\r\n\r\n    autenticacion(req, res) {\r\n        return res.send(true);\r\n    }\r\n\r\n};"]}