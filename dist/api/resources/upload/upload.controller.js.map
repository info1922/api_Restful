{"version":3,"sources":["../../../../src/api/resources/upload/upload.controller.js"],"names":["express","require","fileUpload","fs","app","use","update","req","res","tipo","params","id","tiposValidos","indexOf","status","json","ok","mensaje","errors","message","files","archivo","imagen","nombreCortado","name","split","extencionArchivo","length","extencionesValidadas","messag","join","crearDirectorio","nombreArchivo","Date","getMilliseconds","path","mv","err","subirPorTipo","Usuario","findById","usuario","unlinkSync","pathViejo","img","existsSync","save","usuarioActualizado","Lugar","lugar","lugarActualizado","Material","material","materialActualizado","directorio","mkdirSync"],"mappings":"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","file":"upload.controller.js","sourcesContent":["var express = require('express');\r\nvar fileUpload = require('express-fileupload');\r\nvar fs = require('fs');\r\nvar app = express();\r\napp.use(fileUpload());\r\n\r\nimport Usuario from '../usuario/usuario.model';\r\nimport Material from '../material/material.model';\r\nimport Lugar from '../lugar/lugar.model';\r\n/* jshint ignore:start */\r\n\r\nexport default {\r\n    update(req, res) {\r\n        const tipo = req.params.tipo;\r\n        const id = req.params.id;\r\n\r\n        // Tipos validos\r\n        const tiposValidos = ['lugares', 'materiales', 'usuarios'];\r\n\r\n        // Crear las carpetas si no existen\r\n\r\n\r\n        if (tiposValidos.indexOf(tipo) < 0) {\r\n            return res.status(400).json({\r\n                ok: false,\r\n                mensaje: 'El tipo de colección no es válida',\r\n                errors: { message: 'El tipo de colección no es válida' }\r\n            })\r\n        }\r\n\r\n        // Validar si mandan archivo\r\n        if (!req.files) {\r\n            return res.status(400).json({\r\n                ok: false,\r\n                mensaje: 'Por favor selecciona un archivo de imagen',\r\n                errors: { message: 'Selecciona un archivo de imagen' }\r\n            })\r\n        }\r\n\r\n\r\n        // Obtener el nombre de la imagen y extención\r\n        // Arreglo del nombre del archivo cortado por el punto\r\n        const archivo = req.files.imagen;\r\n        const nombreCortado = archivo.name.split('.');\r\n        const extencionArchivo = nombreCortado[nombreCortado.length - 1];\r\n\r\n        // Extenciones permitidas\r\n        const extencionesValidadas = ['png', 'JPG', 'PNG', 'jpg', 'JPEG', 'jpeg'];\r\n\r\n        // Validar extención (-1 si no lo encuentra)\r\n        if (extencionesValidadas.indexOf(extencionArchivo) < 0) {\r\n            return res.status(400).json({\r\n                ok: false,\r\n                mensaje: 'Extención no valida',\r\n                errors: { messag: 'Las extenciones permitidas son: ' + extencionesValidadas.join(', ') }\r\n            });\r\n        }\r\n\r\n        // Creamos el path\r\n        crearDirectorio(tipo);\r\n\r\n        // Nombre personalizado 12323sda2323-122.png\r\n        const nombreArchivo = `${id}-${new Date().getMilliseconds()}.${extencionArchivo}`;\r\n\r\n        // Mover el archivo del temporal a un path\r\n        const path = `./uploads/${tipo}/${nombreArchivo}`;\r\n\r\n        archivo.mv(path, err => {\r\n            if (err) {\r\n                return res.status(500).json({\r\n                    ok: false,\r\n                    mensaje: 'Error al mover archivo',\r\n                    errors: err\r\n                });\r\n            }\r\n        });\r\n\r\n        subirPorTipo(tipo, id, nombreArchivo, res, path);\r\n\r\n    },\r\n\r\n\r\n};\r\n\r\nfunction subirPorTipo(tipo, id, nombreArchivo, res, path) {\r\n    if (tipo === 'usuarios') {\r\n\r\n        Usuario.findById(id, (err, usuario) => {\r\n            if (!usuario) {\r\n                // Eliminamos la imagen de usuario incorrecto\r\n                fs.unlinkSync(path);\r\n                return res.status(400).json({ ok: false, mensaje: 'Este usuario no existe' });\r\n            }\r\n            if (err) {\r\n                return res.status(500).json({ ok: false, mensaje: 'Este usuario no existe', err });\r\n            }\r\n\r\n            const pathViejo = './uploads/usuarios/' + usuario.img;\r\n\r\n            // Si ya existe un archivo, lo remplaza\r\n            if (fs.existsSync(pathViejo)) {\r\n                fs.unlinkSync(pathViejo)\r\n            }\r\n\r\n            usuario.img = nombreArchivo;\r\n            usuario.save((err, usuarioActualizado) => {\r\n                if (err) {\r\n                    return res.status(500).json({ ok: false, mensaje: 'Error al actualizar la imagen', err });\r\n                }\r\n                return res.status(200).json({ ok: true, mensaje: 'Imagen de usuario actualizada', usuarioActualizado })\r\n            });\r\n\r\n\r\n        });\r\n    }\r\n    if (tipo === 'lugares') {\r\n\r\n        Lugar.findById(id, (err, lugar) => {\r\n            if (!lugar) {\r\n                // Eliminamos la imagen del lugar incorrecto\r\n                fs.unlinkSync(path);\r\n                return res.status(400).json({ ok: false, mensaje: 'Este lugar no existe' });\r\n            }\r\n            if (err) {\r\n                return res.status(500).json({ ok: false, mensaje: 'Este lugar no existe', err });\r\n            }\r\n\r\n            const pathViejo = './uploads/lugares/' + lugar.img;\r\n\r\n            // Si ya existe un archivo, lo remplaza\r\n            if (fs.existsSync(pathViejo)) {\r\n                fs.unlinkSync(pathViejo)\r\n            }\r\n\r\n            lugar.img = nombreArchivo;\r\n\r\n            lugar.save((err, lugarActualizado) => {\r\n                if (err) {\r\n                    return res.status(500).json({ ok: false, mensaje: 'Error al actualizar el lugar', err });\r\n                }\r\n                return res.status(200).json({ ok: true, mensaje: 'Imagen del lugar actualizada', lugarActualizado })\r\n            });\r\n\r\n        });\r\n\r\n    }\r\n    if (tipo === 'materiales') {\r\n\r\n        Material.findById(id, (err, material) => {\r\n\r\n            if (!material) {\r\n                // Eliminamos la imagen del lugar incorrecto\r\n                fs.unlinkSync(path);\r\n                return res.status(400).json({ ok: false, mensaje: 'Este material no existe' });\r\n            }\r\n            if (err) {\r\n                return res.status(500).json({ ok: false, mensaje: 'Este material no existe', err });\r\n            }\r\n\r\n            const pathViejo = './uploads/materiales/' + material.img;\r\n\r\n            // Si ya existe un archivo, lo remplaza\r\n            if (fs.existsSync(pathViejo)) {\r\n                fs.unlinkSync(pathViejo)\r\n            }\r\n\r\n            material.img = nombreArchivo;\r\n\r\n            material.save((err, materialActualizado) => {\r\n                if (err) {\r\n                    return res.status(500).json({ ok: false, mensaje: 'Error al actualizar el material', err });\r\n                }\r\n                return res.status(200).json({ ok: true, mensaje: 'Imagen del material actualizada', materialActualizado })\r\n            });\r\n\r\n        });\r\n\r\n    }\r\n}\r\n\r\nfunction crearDirectorio(tipo) {\r\n    const directorio = `./uploads/${tipo}`;\r\n\r\n    if (!fs.existsSync(directorio)) {\r\n        fs.mkdirSync(directorio);\r\n        // console.log('Se creo directorio: ', directorio);\r\n    }\r\n\r\n    // console.log('Ya existe este directorio');\r\n}"]}