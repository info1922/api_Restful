{"version":3,"sources":["../../../../src/api/resources/lugar/lugar.controller.js"],"names":["create","req","res","lugarService","validateBody","body","value","error","details","status","json","lugarModel","usuario","currentUser","_id","lugar","ok","findAll","find","populate","lugarlist","findOne","id","params","findById","mensaje","update","user","lug1","nombre","mat","materiales","materialModel","where","mater","length","console","log","findOneAndUpdate","new","$set","$push","map","d","exec","err","material","asignado","save","materialUpdate","title","message","algo","delete","vacio","lug","remove","mbuscar","m","b","findByIdAndUpdate","$unset"],"mappings":"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","file":"lugar.controller.js","sourcesContent":["import Joi from 'joi';\r\nimport lugarService from \"./lugar.service\";\r\nimport lugarModel from \"./lugar.model\";\r\nimport materialModel from \"../material/material.model\";\r\n\r\n/* jshint ignore:start */\r\nexport default {\r\n\r\n    async create(req, res) {\r\n        try {\r\n            const { value, error } = lugarService.validateBody(req.body);\r\n            if (error && error.details) {\r\n                return res.status(500).json({ error })\r\n            }\r\n\r\n            const lugar = await lugarModel.create(Object.assign({}, value, { usuario: req.currentUser._id }));\r\n\r\n            /**\r\n             * TODO: No asignara materiales cuando se cree un nuevo lugar\r\n             */\r\n\r\n            return res.status(200).json({ ok: true, lugar });\r\n\r\n        } catch (error) {\r\n            return res.status(500).json({ error });\r\n        }\r\n    },\r\n\r\n    async findAll(req, res) {\r\n        try {\r\n            const lugarlist = await lugarModel.find()\r\n                .populate('materiales')\r\n                .populate('usuario', 'nombre apellido local google facebook');\r\n            return res.status(200).json({ ok: true, lugarlist });\r\n        } catch (error) {\r\n            return res.status(500).json({ error });\r\n        }\r\n    },\r\n\r\n    async findOne(req, res) {\r\n\r\n        try {\r\n            let { id } = req.params;\r\n\r\n            const lugar = await lugarModel.findById(id)\r\n                .populate('usuario')\r\n                .populate('materiales');\r\n\r\n            if (!lugar) {\r\n                return res.status(404).json({ ok: false, mensaje: 'No se encontro el lugar' })\r\n            }\r\n\r\n            return res.status(200).json({ ok: true, lugar });\r\n\r\n        } catch (error) {\r\n            return res.status(500).json({ ok: false, error });\r\n        }\r\n\r\n\r\n    },\r\n\r\n\r\n    async update(req, res) {\r\n\r\n        try {\r\n            let id = req.params.id;\r\n            let body = req.body;\r\n            const user = req.currentUser._id;\r\n\r\n            let lug1 = {\r\n                nombre: body.nombre,\r\n                usuario: req.currentUser._id,\r\n            }\r\n\r\n\r\n            const mat = body.materiales;\r\n            // console.log('Lugares para agregar: ', mat.length);\r\n\r\n\r\n            const mater = await materialModel.find({ _id: mat }).where('asignado', false);\r\n            // console.log('Lugares encontrados: ', mater);\r\n\r\n\r\n            if (mater.length <= 0) {\r\n\r\n                // console.log('Id del delugar: ', req.params.id);\r\n                console.log('No hay materiales');\r\n                const lugar = await lugarModel.findOneAndUpdate({ _id: req.params.id }, lug1, { new: true });\r\n                console.log(lugar);\r\n                return res.status(200).json({ ok: true, mensaje: 'Lugar actualizado m=0', lugar });\r\n\r\n            } else {\r\n\r\n                // console.log('Hay mas de un material');\r\n\r\n                // Guardamos los materiales en la objeto y guardamos en la BD\r\n                const lugar = await lugarModel.findOneAndUpdate(id, { $set: { 'nombre': req.body.nombre }, $push: { 'materiales': req.body.materiales } }, { new: true }).populate('materiales');\r\n\r\n                // console.log('Lugar actualizado: ', lugar);\r\n\r\n                // Actualizamos los materiales con asignado = true\r\n\r\n                mater.map((d) => {\r\n\r\n                    // Revisar por que remplaza el valor anterior por el nuevo\r\n                    materialModel.findById(d._id).exec((err, material) => {\r\n                        if (err) {\r\n                            throw 'Error al actualizar material';\r\n                        }\r\n                        if (!material) {\r\n                            throw 'No hay materiales en el arreglo';\r\n                        }\r\n                        console.log('Materiales agregados: ', material);\r\n\r\n                        if (material.asignado === false) {\r\n                            material.asignado = true;\r\n                            material.lugar = req.params.id;\r\n                            material.usuario = req.currentUser._id;\r\n\r\n                            material.save((err, materialUpdate) => {\r\n                                if (err) {\r\n                                    throw err;\r\n                                }\r\n                                console.log('Materiales actalizados: ', materialUpdate);\r\n                            });\r\n                        } else {\r\n                            console.log('Este material ya esta asignado', material.title);\r\n                        }\r\n\r\n                    });\r\n                });\r\n\r\n                return res.status(200).json({ mensaje: 'Lugar actualizado m>0', lugar });\r\n\r\n            }\r\n\r\n        } catch (error) {\r\n            return res.status(500).json({ error: { message: 'Error al actualiza el lugar' }, algo: error });\r\n        }\r\n\r\n    },\r\n\r\n    async delete(req, res) {\r\n        try {\r\n            let id = req.params.id;\r\n\r\n            const lugar = await lugarModel.find({ _id: id });\r\n\r\n            let vacio;\r\n\r\n            console.log('Lugar a buscar: ', lugar);\r\n\r\n            const lug = await lugarModel.findById({ _id: id });\r\n            if (!lugar) {\r\n                return res.status(400).json({ ok: false, mensaje: 'Lugar no encontrado' });\r\n            }\r\n            if (lugar === null) {\r\n                return res.status(400).json({ ok: false, mensaje: 'Lugar no encontrado' });\r\n            }\r\n\r\n            // Tiene materiales en el arreglo ?? \r\n            lugar.map((d) => {\r\n                vacio = d.materiales;\r\n            });\r\n\r\n            if (vacio.length === 0) {\r\n                console.log('No tiene materiales');\r\n                lug.remove();\r\n                return res.status(200).json({ ok: true, mensaje: 'Lugar eliminado', lugar });\r\n            } else {\r\n                console.log('Contiene materiales', vacio.length);\r\n                let mbuscar\r\n                    // Recorremos el arreglo del lugar\r\n                lugar.map((m) => {\r\n                    mbuscar = m.materiales;\r\n                    console.log(mbuscar);\r\n                    // Recorremos el arreglo de materiales de un lugar\r\n                    mbuscar.map((b) => {\r\n                        // Buscamos los materiales dentro del arreglo\r\n                        materialModel.findByIdAndUpdate({ _id: b }, { $set: { 'asignado': false, 'desvincular': false }, $unset: { 'lugar': lugar } }).exec((err, material) => {\r\n                            if (err) {\r\n                                return 'Error';\r\n                            }\r\n                            if (!material) {\r\n                                throw 'Materiales nulos';\r\n                            }\r\n\r\n                        });\r\n                        console.log(b);\r\n                    });\r\n\r\n                });\r\n            }\r\n\r\n            lug.remove();\r\n\r\n            return res.status(200).json({ ok: true, mensaje: 'Lugar eliminado', lugar });\r\n\r\n\r\n        } catch (error) {\r\n            return res.status(500).json({ ok: false, mensaje: 'Error en la petición' });\r\n        }\r\n    }\r\n\r\n}"]}