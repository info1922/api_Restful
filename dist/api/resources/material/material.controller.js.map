{"version":3,"sources":["../../../../src/api/resources/material/material.controller.js"],"names":["fs","require","create","req","res","body","material","Material","title","url","asignado","cantidad","img","lugar","usuario","currentUser","_id","existLugar","undefined","save","mater","status","json","ok","Lugar","findByIdAndUpdate","$push","new","lug","msg","error","findAll","query","page","perPage","options","parseInt","limit","populate","path","select","paginate","materiales","findOne","id","params","findById","mensaje","delete","lugarExiste","materialId","materialD","nombreImagen","$pull","exists","existe","unlinkSync","findByIdAndRemove","update","desvincular","user","des","mafind","console","log","$set","$unset","matActual2","nuevoOrigen","viejoOrigen","matActual1","message","algo"],"mappings":"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","file":"material.controller.js","sourcesContent":["import Joi from 'joi';\r\nvar fs = require('fs');\r\nimport Material from './material.model';\r\nimport Lugar from '../lugar/lugar.model';\r\n\r\n/* jshint ignore:start */\r\nexport default {\r\n\r\n    async create(req, res) {\r\n\r\n        try {\r\n\r\n            // Guardar el material con el id del lugar para referencias y cambiar\r\n            // asignado = true\r\n            const body = req.body;\r\n            // const user = req.currentUser._id;\r\n\r\n            let material = new Material({\r\n                title: body.title,\r\n                url: body.url,\r\n                asignado: body.asignado,\r\n                cantidad: body.cantidad,\r\n                img: body.img,\r\n                lugar: body.lugar,\r\n                usuario: req.currentUser._id,\r\n            });\r\n\r\n            const existLugar = material.lugar;\r\n\r\n            // Verifica si un material esta asignado a un lugar\r\n            if (existLugar === undefined) {\r\n                // console.log('Esta vacio');\r\n                material.asignado = false;\r\n                const mater = await material.save();\r\n\r\n                // console.log('Vacio: ', mater);\r\n                return res.status(200).json({ ok: true, mater });\r\n            } else {\r\n                // console.log('Tiene dato');\r\n                material.asignado = true;\r\n                const mater = await material.save();\r\n                // console.log('lleno: ', mater);\r\n                // console.log('Id nuevo material: ', mater._id)\r\n                const lug = await Lugar.findByIdAndUpdate({ _id: body.lugar }, { $push: { 'materiales': mater._id } }, { new: true });\r\n                // console.log('Lugar : ', lug);\r\n                return res.status(200).json({ ok: true, mater });\r\n            }\r\n\r\n            // const mater = await material.save();\r\n            // console.log('Id del lugar: ', existLugar);\r\n\r\n\r\n\r\n        } catch (error) {\r\n            return res.status(500).json({ ok: false, msg: 'Error al guardar el material', error });\r\n        }\r\n\r\n    },\r\n\r\n    async findAll(req, res) {\r\n        try {\r\n\r\n            const { page, perPage } = req.query;\r\n\r\n            const options = {\r\n                page: parseInt(page, 10) || 1,\r\n                limit: parseInt(perPage, 10) || 5,\r\n                populate: { path: 'usuario', select: 'nombre apellido' }\r\n            }\r\n\r\n            const materiales = await Material.paginate({}, options);\r\n            return res.status(200).json(materiales);\r\n        } catch (error) {\r\n            return res.status(500).json({ ok: false, error });\r\n        }\r\n    },\r\n\r\n    async findOne(req, res) {\r\n\r\n        try {\r\n            let { id } = req.params;\r\n\r\n            const material = await Material.findById(id).populate('usuario', 'nombre apellido');\r\n\r\n            if (!material) {\r\n                return res.status(404).json({ ok: false, mensaje: 'No se encontro el material' })\r\n            }\r\n\r\n            return res.status(200).json({ ok: true, material });\r\n\r\n        } catch (error) {\r\n            return res.status(500).json({ ok: false, error });\r\n        }\r\n\r\n\r\n    },\r\n\r\n    // Revisar esta función\r\n    async delete(req, res) {\r\n\r\n        try {\r\n\r\n            let { id } = req.params;\r\n\r\n            // Buscamos el lugar\r\n            const material = await Material.findById({ _id: id }).populate('lugar');\r\n            let lugarExiste = material.lugar;\r\n            let materialId = material._id;\r\n            let lug;\r\n            let materialD;\r\n            let path;\r\n            let nombreImagen = material.img;\r\n\r\n            // Asignar el nombre de la imagen\r\n\r\n            if (!material) {\r\n                return res.status(404).json({ ok: false, mensaje: 'No se encontro el material' })\r\n            }\r\n\r\n            if (lugarExiste) {\r\n                // console.log('1.- Existe lugar');\r\n                lug = await Lugar.findByIdAndUpdate({ _id: lugarExiste._id }, { $pull: { 'materiales': materialId } }, { new: true });\r\n                if (nombreImagen) {\r\n                    // console.log('2.- Campo imagen existe');\r\n                    path = `./uploads/materiales/${nombreImagen}`;\r\n                    fs.exists(path, existe => {\r\n                        if (existe) {\r\n                            // console.log('3.- Existe imagen');\r\n                            fs.unlinkSync(path);\r\n                        }\r\n                        // console.log('2.- No existe la imagen');\r\n                    });\r\n                }\r\n                //Eliminar material aquí\r\n                materialD = await Material.findByIdAndRemove({ _id: id });\r\n            } else {\r\n                // console.log('no existe lugar');\r\n                if (nombreImagen) {\r\n                    // console.log('2.- Campo imagen existe');\r\n                    path = `./uploads/materiales/${nombreImagen}`;\r\n                    fs.exists(path, existe => {\r\n                        if (existe) {\r\n                            // console.log('3.- Existe imagen');\r\n                            fs.unlinkSync(path);\r\n                        }\r\n                    });\r\n                }\r\n                //Eliminar material aquí\r\n                materialD = await Material.findByIdAndRemove({ _id: id });\r\n            }\r\n\r\n            return res.status(200).json({ ok: true, mensaje: 'Material eliminado correctamente', materialD });\r\n\r\n        } catch (error) {\r\n            return res.status(500).json({ ok: false, error });\r\n        }\r\n\r\n    },\r\n\r\n    async update(req, res) {\r\n\r\n        try {\r\n\r\n            let id = req.params.id;\r\n            var body = req.body\r\n                //\r\n            let mater = {\r\n                title: body.title,\r\n                url: body.url,\r\n                asignado: body.asignado,\r\n                cantidad: body.cantidad,\r\n                lugar: body.lugar,\r\n                desvincular: body.desvincular,\r\n                usuario: req.currentUser._id,\r\n            };\r\n            //\r\n            const user = req.currentUser._id;\r\n\r\n            const des = body.desvincular;\r\n            const existLugar = mater.lugar;\r\n\r\n            const mafind = await Material.findById(id).populate('lugar');\r\n\r\n            // Suponemos que el campo lugar una vez asignado el material; siempre tendra el id del lugar\r\n            // al que pertenece\r\n\r\n\r\n            // Cuando aun no se asigna un lugar y solo se actualiza\r\n            if (mater.lugar === undefined) {\r\n                console.log(mater.title, mater.url);\r\n                // const mafind = await Material.findById(id).populate('lugar');\r\n                await Material.findByIdAndUpdate(id, mater, { new: true });\r\n                const matActual2 = await Material.findByIdAndUpdate(id, { $set: { 'asignado': false, 'desvincular': false }, $unset: { 'lugar': mater.lugar } }, { new: true })\r\n                    // console.log(mater);\r\n                return res.status(200).json({ ok: true, matActual2 });\r\n            }\r\n\r\n            // NOTA: Supongamos que el lugar a asignar existe en la BD\r\n            if (mater.lugar !== undefined) {\r\n                // Buscamos el lugar de mater.lugar en la BD, si existe sigue ->\r\n                // Validar si el campo material.lugar existe Si es la primera vez que se le asigna a un lugar\r\n                if (mafind.lugar === undefined) {\r\n                    const nuevoOrigen = await Lugar.findByIdAndUpdate({ _id: mater.lugar }, { $push: { 'materiales': mafind._id } }, { new: true })\r\n                    mater.asignado = true;\r\n                    mater.desvincular = false;\r\n                    const matActual2 = await Material.findByIdAndUpdate(id, mater, { new: true });\r\n                    return res.status(200).json({ ok: true, matActual2 })\r\n                }\r\n\r\n\r\n                // Desvincular del origen lugar y actualización material\r\n                const viejoOrigen = await Lugar.findByIdAndUpdate({ _id: mafind.lugar._id }, { $pull: { 'materiales': mafind._id } }, { new: true });\r\n                const matActual1 = await Material.findByIdAndUpdate(id, { $set: { 'asignado': false, 'desvincular': false }, $unset: { 'lugar': mater.lugar } }, { new: true })\r\n\r\n\r\n                //Vincular al nuevo origen lugar y actualización material\r\n                // await Lugar.findByIdAndUpdate({ _id: body.lugar }, { $push: { 'materiales': material._id } }, { new: true });\r\n                const nuevoOrigen = await Lugar.findByIdAndUpdate({ _id: mater.lugar }, { $push: { 'materiales': mafind._id } }, { new: true });\r\n                mater.asignado = true;\r\n                mater.desvincular = false;\r\n                const matActual2 = await Material.findByIdAndUpdate(id, mater, { new: true });\r\n\r\n                const lugarExiste = await Lugar.findById({ _id: mater.lugar });\r\n\r\n                return res.status(200).json({ ok: true, matActual2 });\r\n\r\n            }\r\n\r\n        } catch (error) {\r\n            return res.status(500).json({ ok: false, error: { message: 'Error al actualizar el material' }, algo: error });\r\n        }\r\n\r\n    }\r\n\r\n}"]}