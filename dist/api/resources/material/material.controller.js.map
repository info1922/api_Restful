{"version":3,"sources":["../../../../src/api/resources/material/material.controller.js"],"names":["fs","require","create","req","res","body","material","Material","title","url","asignado","cantidad","img","lugar","usuario","currentUser","_id","existLugar","undefined","save","matActual2","status","json","ok","Lugar","findByIdAndUpdate","$push","new","lug","msg","error","bienvenida","mensaje","findAll","query","page","perPage","options","parseInt","limit","populate","path","select","find","materiales","findOne","id","params","findById","delete","lugarExiste","materialId","materialD","nombreImagen","$pull","exists","existe","unlinkSync","findByIdAndRemove","update","mater","desvincular","user","des","mafind","console","log","$set","$unset","nuevoOrigen","viejoOrigen","matActual1","message","algo"],"mappings":"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","file":"material.controller.js","sourcesContent":["import Joi from 'joi';\r\nvar fs = require('fs');\r\nimport Material from './material.model';\r\nimport Lugar from '../lugar/lugar.model';\r\n\r\n/* jshint ignore:start */\r\nexport default {\r\n\r\n    async create(req, res) {\r\n\r\n        try {\r\n\r\n            // Guardar el material con el id del lugar para referencias y cambiar\r\n            // asignado = true\r\n            const body = req.body;\r\n            // const user = req.currentUser._id;\r\n\r\n            let material = new Material({\r\n                title: body.title,\r\n                url: body.url,\r\n                asignado: body.asignado,\r\n                cantidad: body.cantidad,\r\n                img: body.img,\r\n                lugar: body.lugar,\r\n                usuario: req.currentUser._id,\r\n            });\r\n\r\n            const existLugar = material.lugar;\r\n\r\n            // Verifica si un material esta asignado a un lugar\r\n            if (existLugar === undefined) {\r\n                // console.log('Esta vacio');\r\n                material.asignado = false;\r\n                const matActual2 = await material.save();\r\n\r\n                // console.log('Vacio: ', mater);\r\n                return res.status(200).json({ ok: true, matActual2 });\r\n            } else {\r\n                // console.log('Tiene dato');\r\n                material.asignado = true;\r\n                const matActual2 = await material.save();\r\n                // console.log('lleno: ', mater);\r\n                // console.log('Id nuevo material: ', mater._id)\r\n                const lug = await Lugar.findByIdAndUpdate({ _id: body.lugar }, { $push: { 'materiales': matActual2._id } }, { new: true });\r\n                // console.log('Lugar : ', lug);\r\n                return res.status(200).json({ ok: true, matActual2 });\r\n            }\r\n\r\n            // const mater = await material.save();\r\n            // console.log('Id del lugar: ', existLugar);\r\n\r\n\r\n\r\n        } catch (error) {\r\n            return res.status(500).json({ ok: false, msg: 'Error al guardar el material', error });\r\n        }\r\n\r\n    },\r\n\r\n    async bienvenida(req, res) {\r\n        try {\r\n            return res.status(200).json({ ok: true, mensaje: 'Bienvenido' });\r\n        } catch (error) {\r\n            return res.status(500).json({\r\n                ok: false,\r\n                error\r\n            });\r\n        }\r\n    },\r\n\r\n    async findAll(req, res) {\r\n        try {\r\n\r\n            const { page, perPage } = req.query;\r\n\r\n            const options = {\r\n                page: parseInt(page, 10) || 1,\r\n                limit: parseInt(perPage, 10) || 5,\r\n                populate: { path: 'usuario', select: 'nombre apellido' }\r\n            }\r\n\r\n            const materiales = await Material.find()\r\n                .populate('lugar', 'nombre')\r\n                .populate('usuario', 'nombre apellido');\r\n            return res.status(200).json({ ok: true, materiales });\r\n        } catch (error) {\r\n            return res.status(500).json({ ok: false, error });\r\n        }\r\n    },\r\n\r\n    async findOne(req, res) {\r\n\r\n        try {\r\n            let { id } = req.params;\r\n\r\n            const material = await Material.findById(id).populate('usuario', 'nombre apellido');\r\n\r\n            if (!material) {\r\n                return res.status(404).json({ ok: false, mensaje: 'No se encontro el material' })\r\n            }\r\n\r\n            return res.status(200).json({ ok: true, material });\r\n\r\n        } catch (error) {\r\n            return res.status(500).json({ ok: false, error });\r\n        }\r\n\r\n\r\n    },\r\n\r\n    // Revisar esta función\r\n    async delete(req, res) {\r\n\r\n        try {\r\n\r\n            let { id } = req.params;\r\n\r\n            // Buscamos el lugar\r\n            const material = await Material.findById({ _id: id }).populate('lugar');\r\n            let lugarExiste = material.lugar;\r\n            let materialId = material._id;\r\n            let lug;\r\n            let materialD;\r\n            let path;\r\n            let nombreImagen = material.img;\r\n\r\n            // Asignar el nombre de la imagen\r\n\r\n            if (!material) {\r\n                return res.status(404).json({ ok: false, mensaje: 'No se encontro el material' })\r\n            }\r\n\r\n            if (lugarExiste) {\r\n                // console.log('1.- Existe lugar');\r\n                lug = await Lugar.findByIdAndUpdate({ _id: lugarExiste._id }, { $pull: { 'materiales': materialId } }, { new: true });\r\n                if (nombreImagen) {\r\n                    // console.log('2.- Campo imagen existe');\r\n                    path = `./uploads/materiales/${nombreImagen}`;\r\n                    fs.exists(path, existe => {\r\n                        if (existe) {\r\n                            // console.log('3.- Existe imagen');\r\n                            fs.unlinkSync(path);\r\n                        }\r\n                        // console.log('2.- No existe la imagen');\r\n                    });\r\n                }\r\n                //Eliminar material aquí\r\n                materialD = await Material.findByIdAndRemove({ _id: id });\r\n            } else {\r\n                // console.log('no existe lugar');\r\n                if (nombreImagen) {\r\n                    // console.log('2.- Campo imagen existe');\r\n                    path = `./uploads/materiales/${nombreImagen}`;\r\n                    fs.exists(path, existe => {\r\n                        if (existe) {\r\n                            // console.log('3.- Existe imagen');\r\n                            fs.unlinkSync(path);\r\n                        }\r\n                    });\r\n                }\r\n                //Eliminar material aquí\r\n                materialD = await Material.findByIdAndRemove({ _id: id });\r\n            }\r\n\r\n            return res.status(200).json({ ok: true, mensaje: 'Material eliminado correctamente', materialD });\r\n\r\n        } catch (error) {\r\n            return res.status(500).json({ ok: false, error });\r\n        }\r\n\r\n    },\r\n\r\n    async update(req, res) {\r\n\r\n        try {\r\n\r\n            let id = req.params.id;\r\n            var body = req.body\r\n                //\r\n            let mater = {\r\n                title: body.title,\r\n                url: body.url,\r\n                asignado: body.asignado,\r\n                cantidad: body.cantidad,\r\n                lugar: body.lugar,\r\n                desvincular: body.desvincular,\r\n                usuario: req.currentUser._id,\r\n            };\r\n            //\r\n            const user = req.currentUser._id;\r\n\r\n            const des = body.desvincular;\r\n            const existLugar = mater.lugar;\r\n\r\n            const mafind = await Material.findById(id).populate('lugar');\r\n\r\n            // Suponemos que el campo lugar una vez asignado el material; siempre tendra el id del lugar\r\n            // al que pertenece\r\n\r\n\r\n            // Cuando aun no se asigna un lugar y solo se actualiza\r\n            if (mater.lugar === undefined) {\r\n                console.log(mater.title, mater.url);\r\n                // const mafind = await Material.findById(id).populate('lugar');\r\n                await Material.findByIdAndUpdate(id, mater, { new: true });\r\n                const matActual2 = await Material.findByIdAndUpdate(id, { $set: { 'asignado': false, 'desvincular': false }, $unset: { 'lugar': mater.lugar } }, { new: true })\r\n                    // console.log(mater);\r\n                return res.status(200).json({ ok: true, matActual2 });\r\n            }\r\n\r\n            // NOTA: Supongamos que el lugar a asignar existe en la BD\r\n            if (mater.lugar !== undefined) {\r\n                // Buscamos el lugar de mater.lugar en la BD, si existe sigue ->\r\n                // Validar si el campo material.lugar existe Si es la primera vez que se le asigna a un lugar\r\n                if (mafind.lugar === undefined) {\r\n                    const nuevoOrigen = await Lugar.findByIdAndUpdate({ _id: mater.lugar }, { $push: { 'materiales': mafind._id } }, { new: true })\r\n                    mater.asignado = true;\r\n                    mater.desvincular = false;\r\n                    const matActual2 = await Material.findByIdAndUpdate(id, mater, { new: true });\r\n                    return res.status(200).json({ ok: true, matActual2 })\r\n                }\r\n\r\n\r\n                // Desvincular del origen lugar y actualización material\r\n                const viejoOrigen = await Lugar.findByIdAndUpdate({ _id: mafind.lugar._id }, { $pull: { 'materiales': mafind._id } }, { new: true });\r\n                const matActual1 = await Material.findByIdAndUpdate(id, { $set: { 'asignado': false, 'desvincular': false }, $unset: { 'lugar': mater.lugar } }, { new: true })\r\n\r\n\r\n                //Vincular al nuevo origen lugar y actualización material\r\n                // await Lugar.findByIdAndUpdate({ _id: body.lugar }, { $push: { 'materiales': material._id } }, { new: true });\r\n                const nuevoOrigen = await Lugar.findByIdAndUpdate({ _id: mater.lugar }, { $push: { 'materiales': mafind._id } }, { new: true });\r\n                mater.asignado = true;\r\n                mater.desvincular = false;\r\n                const matActual2 = await Material.findByIdAndUpdate(id, mater, { new: true });\r\n\r\n                const lugarExiste = await Lugar.findById({ _id: mater.lugar });\r\n\r\n                return res.status(200).json({ ok: true, matActual2 });\r\n\r\n            }\r\n\r\n        } catch (error) {\r\n            return res.status(500).json({ ok: false, error: { message: 'Error al actualizar el material' }, algo: error });\r\n        }\r\n\r\n    }\r\n\r\n}"]}