{"version":3,"sources":["../../../../src/api/resources/buscar/buscar.controller.js"],"names":["buscarColeccion","req","res","buscar","params","tabla","regex","RegExp","promesa","buscarUsuarios","buscarMateriales","buscarLugares","status","json","ok","mensaje","then","data","buscarTodo","next","todo","all","lugares","respuestas","materiales","resolve","reject","lugarModel","find","nombre","exec","err","Material","title"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;kBAEe;AACXA,mBADW,2BACKC,GADL,EACUC,GADV,EACe;AACtB,YAAIC,SAASF,IAAIG,MAAJ,CAAWD,MAAxB;AACA,YAAIE,QAAQJ,IAAIG,MAAJ,CAAWC,KAAvB;AACA,YAAIC,QAAQ,IAAIC,MAAJ,CAAWJ,MAAX,EAAmB,GAAnB,CAAZ;;AAEA,YAAIK,gBAAJ;;AAEA,gBAAQH,KAAR;AACI,iBAAK,UAAL;AACIG,0BAAUC,eAAeN,MAAf,EAAuBG,KAAvB,CAAV;AACA;;AAEJ,iBAAK,YAAL;AACIE,0BAAUE,iBAAiBP,MAAjB,EAAyBG,KAAzB,CAAV;AACA;;AAEJ,iBAAK,SAAL;AACIE,0BAAUG,cAAcR,MAAd,EAAsBG,KAAtB,CAAV;AACA;;AAEJ;AACI,uBAAOJ,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,IAAI,KAAN,EAAaC,SAAS,qBAAtB,EAArB,CAAP;AAdR;;AAiBAP,gBAAQQ,IAAR,CAAa,gBAAQ;AACjBd,gBAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;AACIC,oBAAI;AADR,eAEKT,KAFL,EAEaY,IAFb;AAIH,SALD;;AAOA;AACH,KAjCU;AAmCXC,cAnCW,sBAmCAjB,GAnCA,EAmCKC,GAnCL,EAmCUiB,IAnCV,EAmCgB;AACvB,YAAIC,OAAOnB,IAAIG,MAAJ,CAAWgB,IAAtB;AACA,YAAId,QAAQ,IAAIC,MAAJ,CAAWa,IAAX,EAAiB,GAAjB,CAAZ;;AAGA,0BAAQC,GAAR,CAAY,CACRV,cAAcS,IAAd,EAAoBd,KAApB,CADQ,EAERI,iBAAiBU,IAAjB,EAAuBd,KAAvB,CAFQ,CAAZ,EAGGU,IAHH,CAGQ,sBAAc;AAClBd,gBAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,oBAAI,IADa;AAEjBQ,yBAASC,WAAW,CAAX,CAFQ;AAGjBC,4BAAYD,WAAW,CAAX;AAHK,aAArB;AAKH,SATD;AAWH;AAnDU,C;;;AAwDf,SAASZ,aAAT,CAAuBR,MAAvB,EAA+BG,KAA/B,EAAsC;AAClC,WAAO,sBAAY,UAACmB,OAAD,EAAUC,MAAV,EAAqB;AACpCC,wBAAWC,IAAX,CAAgB,EAAEC,QAAQvB,KAAV,EAAhB,EACKwB,IADL,CACU,UAACC,GAAD,EAAMT,OAAN,EAAkB;AACpB,gBAAIS,GAAJ,EAAS;AACLL,uBAAO,6BAAP,EAAsCK,GAAtC;AACH,aAFD,MAEO;AACHN,wBAAQH,OAAR;AACH;AACJ,SAPL;AAQH,KATM,CAAP;AAUH;;AAED,SAASZ,gBAAT,CAA0BP,MAA1B,EAAkCG,KAAlC,EAAyC;AACrC,WAAO,sBAAY,UAACmB,OAAD,EAAUC,MAAV,EAAqB;AACpCM,2BAASJ,IAAT,CAAc,EAAEK,OAAO3B,KAAT,EAAd,EACKwB,IADL,CACU,UAACC,GAAD,EAAMP,UAAN,EAAqB;AACvB,gBAAIO,GAAJ,EAAS;AACLL,uBAAO,gCAAP,EAAyCK,GAAzC;AACH,aAFD,MAEO;AACHN,wBAAQD,UAAR;AACH;AACJ,SAPL;AAQH,KATM,CAAP;AAUH","file":"buscar.controller.js","sourcesContent":["import Material from '../material/material.model';\r\nimport lugarModel from '../lugar/lugar.model';\r\n\r\nexport default {\r\n    buscarColeccion(req, res) {\r\n        let buscar = req.params.buscar;\r\n        let tabla = req.params.tabla;\r\n        let regex = new RegExp(buscar, 'i');\r\n\r\n        let promesa;\r\n\r\n        switch (tabla) {\r\n            case 'usuarios':\r\n                promesa = buscarUsuarios(buscar, regex);\r\n                break;\r\n\r\n            case 'materiales':\r\n                promesa = buscarMateriales(buscar, regex);\r\n                break;\r\n\r\n            case 'lugares':\r\n                promesa = buscarLugares(buscar, regex);\r\n                break;\r\n\r\n            default:\r\n                return res.status(400).json({ ok: false, mensaje: 'Colección no valida' });\r\n        }\r\n\r\n        promesa.then(data => {\r\n            res.status(200).json({\r\n                ok: true,\r\n                [tabla]: data\r\n            });\r\n        });\r\n\r\n        // res.send('Buscar por colección');\r\n    },\r\n\r\n    buscarTodo(req, res, next) {\r\n        let todo = req.params.todo;\r\n        let regex = new RegExp(todo, 'i');\r\n\r\n\r\n        Promise.all([\r\n            buscarLugares(todo, regex),\r\n            buscarMateriales(todo, regex)\r\n        ]).then(respuestas => {\r\n            res.status(200).json({\r\n                ok: true,\r\n                lugares: respuestas[0],\r\n                materiales: respuestas[1]\r\n            });\r\n        });\r\n\r\n    },\r\n\r\n\r\n};\r\n\r\nfunction buscarLugares(buscar, regex) {\r\n    return new Promise((resolve, reject) => {\r\n        lugarModel.find({ nombre: regex })\r\n            .exec((err, lugares) => {\r\n                if (err) {\r\n                    reject('Error al cargar los lugares', err);\r\n                } else {\r\n                    resolve(lugares);\r\n                }\r\n            });\r\n    });\r\n}\r\n\r\nfunction buscarMateriales(buscar, regex) {\r\n    return new Promise((resolve, reject) => {\r\n        Material.find({ title: regex })\r\n            .exec((err, materiales) => {\r\n                if (err) {\r\n                    reject('Error al cargar los materiales', err);\r\n                } else {\r\n                    resolve(materiales);\r\n                }\r\n            });\r\n    });\r\n}"]}